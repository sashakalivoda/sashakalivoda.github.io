I"•<p><strong>Note: This data and program was created before the New York Times purchased Wordle.</strong></p>

<h2 id="how-to-play">How to play</h2>

<p>I, like many others, am obsessed with Wordle. The game is simple: you have six guesses to solve one five-letter word. With each guess, the background of the letter turns either green, yellow, or white/black (depending on whether your phone is on light or dark mode). Green tells you that the letter is in the word and in the right position. Yellow tells you that the letter is in the word but it isnâ€™t in that position. White/black tells you that the letter is not in the word at all. Using the clues given and good choice of guesses, you shoud be able to guess the word within six tries. But what is the best way to get the word in the least amount of tries?</p>

<h2 id="background">Background</h2>

<p>One day I was talking to my friend and she told me that her teacher created a program that would give a list of possible words with every guess you make. So you would guess the word and then input the color pattern and then using what information is given, the program would narrow down the list of all possible five-letter words to only the ones possible. This sounded like a fun little challenge for me to make at home so I decided to go ahead and try it. But I also wondered, what if it could suggest the most likely answer?</p>

<p>But how does one figure out the most likely answer? The game is tricky because at the start of the game you want to guess words with letters that are likely to be in the word and can narrow down the possibilities. Many people guess words with a lot of vowels such as AUDIO or ADIEU so that they can narrow down which vowels are in the word. This is a great tactic, even though they sacrifice a guess, knowing that the first word is never going to be correct (Itâ€™s possible that the answer could one day be AUDIO, but ADIEU is French and is not a possible solution). Then there are the consonants that show up the most often in words such as S, R, T, N, and L. These letters show up most often in the English language, but does it apply to five-letter words? Also, the words that are the solutions to Wordle are specifically chosen. The solution list is a list of five-letter words * <em>a fifth</em> * of the size of all five-letter words.</p>

<p>Are the letters in the solutions list as common as the letters in all possible five-letter words? This is what I set to figure out.</p>

<h2 id="import-the-necessary-packages">Import the necessary packages</h2>

<p>We are going to need these packages for later on so we should import them now.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import pandas as pd
import numpy as np
from string import ascii_lowercase
import matplotlib.pyplot as plt
import seaborn as sns

</code></pre></div></div>

<h2 id="creating-a-file-of-five-letter-words">Creating a file of five-letter words</h2>

<p>I looked for a list of five-letter words all over the internet but I came up with nothing (now thereâ€™s a list on Kaggle made specifically for Wordle, we will talk about that later). So instead I had to get a file of all English words and then cut out the words that are longer than five letters. I found the file on Github on this <strong>page</strong>. As you can imagine, the file size of the list of English words is massive and it takes a while to parse through it, so I would suggest saving it as a separate file.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">words</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'words_alpha.txt'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">==</span> <span class="mi">5</span><span class="p">:</span>
        <span class="n">words</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
<span class="n">df</span><span class="p">.</span><span class="n">to_csv</span><span class="p">(</span><span class="s">'words.csv'</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Check
</span><span class="nb">file</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'words.csv'</span><span class="p">)</span>
<span class="nb">file</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>aahed</td>
    </tr>
    <tr>
      <th>1</th>
      <td>aalii</td>
    </tr>
    <tr>
      <th>2</th>
      <td>aargh</td>
    </tr>
    <tr>
      <th>3</th>
      <td>aaron</td>
    </tr>
    <tr>
      <th>4</th>
      <td>abaca</td>
    </tr>
  </tbody>
</table>
</div>

<h2 id="comparing-lists">Comparing lists</h2>

<p>The benefit of the Wordle solution list being set is that there is a list of the solutions on the internet so we can actually compare all the solutions to the list of all possible words. I got the list of solutions to Wordle <strong>here</strong>.</p>

<p>To start, we break up the list of all five-letter words into a dictionary of the letters and the count of those letters. We will also do that with the list of Wordle solutions. To be able to do that we had to parse through all the words and split each word into five letters. For each letter that was counted, the count increased by one.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Creating a dictionary of letters and the counts of the letters 
</span><span class="n">letters</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">ascii_lowercase</span><span class="p">)</span>
<span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="mi">26</span>

<span class="n">words_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">letters</span><span class="p">,</span> <span class="n">numbers</span><span class="p">))</span>
<span class="n">wordle_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">letters</span><span class="p">,</span> <span class="n">numbers</span><span class="p">))</span>

<span class="c1"># Creating list of five-letter words
</span><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'words.csv'</span><span class="p">)</span>
<span class="n">word_list</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">].</span><span class="n">tolist</span><span class="p">()</span>

<span class="c1"># Creating list of Worldle solutions
</span><span class="n">wordle</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'Wordle words.csv'</span><span class="p">)</span>
<span class="n">wordle_list</span> <span class="o">=</span> <span class="n">wordle</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">].</span><span class="n">tolist</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Counting the number of letters in the word lists
</span><span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">word_list</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">words_dict</span><span class="p">.</span><span class="n">keys</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">char</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span>
                <span class="n">words_dict</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">+=</span><span class="mi">1</span>
                
<span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">wordle_list</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">wordle_dict</span><span class="p">.</span><span class="n">keys</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">char</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span>
                <span class="n">wordle_dict</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">+=</span><span class="mi">1</span>
</code></pre></div></div>

<p>We can now check that the dictionary does have a count for the letters.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">words_dict</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{'a': 8392,
 'b': 2089,
 'c': 2744,
 'd': 2811,
 'e': 7800,
 'f': 1238,
 'g': 1971,
 'h': 2284,
 'i': 5067,
 'j': 376,
 'k': 1743,
 'l': 4246,
 'm': 2494,
 'n': 4043,
 'o': 5219,
 'p': 2299,
 'q': 139,
 'r': 5143,
 's': 6537,
 't': 4189,
 'u': 3361,
 'v': 878,
 'w': 1171,
 'x': 361,
 'y': 2521,
 'z': 474}
</code></pre></div></div>

<p>We can see that itâ€™s working, but itâ€™s hard to see how they are different. So we can now put them into graphs.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">words_x</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">words_dict</span><span class="p">.</span><span class="n">keys</span><span class="p">())</span>
<span class="n">words_y</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">words_dict</span><span class="p">.</span><span class="n">values</span><span class="p">())</span>

<span class="n">wordle_x</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">wordle_dict</span><span class="p">.</span><span class="n">keys</span><span class="p">())</span>
<span class="n">wordle_y</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">wordle_dict</span><span class="p">.</span><span class="n">values</span><span class="p">())</span> 

<span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">ncols</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">bar</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">words_dict</span><span class="p">)),</span> <span class="n">words_y</span><span class="p">,</span> <span class="n">tick_label</span><span class="o">=</span><span class="n">words_x</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">set_title</span><span class="p">(</span><span class="s">'All Five-Letter Words'</span><span class="p">,</span><span class="n">size</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>

<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">bar</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">wordle_dict</span><span class="p">)),</span> <span class="n">wordle_y</span><span class="p">,</span> <span class="n">tick_label</span><span class="o">=</span><span class="n">wordle_x</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="s">'orange'</span><span class="p">);</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Wordle Solutions'</span><span class="p">,</span><span class="n">size</span><span class="o">=</span><span class="mi">16</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="/img/posts/wordle/output_13_0.png" alt="png" /></p>

<p>Before we analyze these graphs, we need to take into account the size of the y-axis. The y-axis of the count of all five-letter words is larger by 2000. It makes sense that the list of Wordle solutions has a smaller count for all numbers since itâ€™s a subset of the other list.</p>

<p>We can see that the frequency of letters between the two lists is similar, but not exact. For the Wordle solutions, the letter â€˜Sâ€™ appears much more frequently than in the list of all possible words (although the number of Sâ€™s are similar). We also see that the vowel â€˜Eâ€™ appears more frequently than the vowel â€˜Aâ€™ in the Wordle solutions list.</p>

<h2 id="letter-probability-and-position">Letter Probability and Position</h2>

<p>After doing this, I wanted to know which positions of the letters was most common for each letter. For example, itâ€™s more common for a word to have a vowel in the middle of the word than at the start of one. I wanted to see if there were some letters that had a stronger probability of being in a certain position than others.</p>

<p>To do that we had to split each word by the letters and determine the index of that letter. Then, as we did with the previous count, itâ€™s increased by one each time thereâ€™s a match. This is defined by the Locator function which creates a dictionary for each letter and itâ€™s positions.</p>

<p>Then to find the probability of a letter in a certain position we need to have the probability of the letter multiplied by the probability of the letter in that specific position. The probability of the letter is the count of the letter divided by the total number of letters. The probability of the letter in the specific position is the count of the letter in the position divided by the count of the letter itself. Then we create a nested dictionary of the letters and each of the postions and itâ€™s probability.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">word_locator</span><span class="p">(</span><span class="n">letter</span><span class="p">):</span>
    <span class="n">letter_loc</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">:</span><span class="mi">0</span><span class="p">}</span>
    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">word_list</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">char</span> <span class="o">==</span> <span class="n">letter</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">letter_loc</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">key</span> <span class="o">==</span> <span class="n">word</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">char</span><span class="p">):</span>
                        <span class="n">letter_loc</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">+=</span><span class="mi">1</span>
    <span class="k">return</span> <span class="n">letter_loc</span>

<span class="k">def</span> <span class="nf">wordle_locator</span><span class="p">(</span><span class="n">letter</span><span class="p">):</span>
    <span class="n">letter_loc</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">:</span><span class="mi">0</span><span class="p">}</span>
    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">wordle_list</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">char</span> <span class="o">==</span> <span class="n">letter</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">letter_loc</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">key</span> <span class="o">==</span> <span class="n">word</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">char</span><span class="p">):</span>
                        <span class="n">letter_loc</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">+=</span><span class="mi">1</span>
    <span class="k">return</span> <span class="n">letter_loc</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>E located in word list:  {0: 616, 1: 2574, 2: 1054, 3: 2121, 4: 1435}
E located in Wordle:  {0: 458, 1: 2189, 2: 908, 3: 1961, 4: 1145}

Count of the letter E in Words list:  7800
Count of the letter E in Wordle list:  6661

Probability of E in the third position in words list:  0.013242869707249652
Probability of E in the third position in Worldle:  0.013999383287079864
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wordle_total_prob</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="n">letters</span><span class="p">:</span>
    <span class="n">num_of_letters</span> <span class="o">=</span> <span class="n">wordle_dict</span><span class="p">[</span><span class="n">letter</span><span class="p">]</span>
    <span class="n">p_of_letter</span> <span class="o">=</span> <span class="p">[</span><span class="n">num_of_letters</span><span class="o">/</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">wordle_list</span><span class="p">)</span><span class="o">*</span><span class="mi">5</span><span class="p">)]</span><span class="o">*</span><span class="mi">5</span>
    <span class="n">p_of_position</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
        <span class="n">p_of_position</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">wordle_locator</span><span class="p">(</span><span class="n">letter</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span><span class="o">/</span><span class="n">num_of_letters</span><span class="p">)</span>
    
    <span class="n">ar1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">p_of_letter</span><span class="p">)</span>
    <span class="n">ar2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">p_of_position</span><span class="p">)</span>
    <span class="n">wordle_total_prob</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">ar1</span><span class="o">*</span><span class="n">ar2</span><span class="p">)</span>
    

<span class="n">words_total_prob</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="n">letters</span><span class="p">:</span>
    <span class="n">num_of_letters</span> <span class="o">=</span> <span class="n">words_dict</span><span class="p">[</span><span class="n">letter</span><span class="p">]</span>
    <span class="n">p_of_letter</span> <span class="o">=</span> <span class="p">[</span><span class="n">num_of_letters</span><span class="o">/</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">word_list</span><span class="p">)</span><span class="o">*</span><span class="mi">5</span><span class="p">)]</span><span class="o">*</span><span class="mi">5</span>
    <span class="n">p_of_position</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
        <span class="n">p_of_position</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">word_locator</span><span class="p">(</span><span class="n">letter</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span><span class="o">/</span><span class="n">num_of_letters</span><span class="p">)</span>
    
    <span class="n">ar1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">p_of_letter</span><span class="p">)</span>
    <span class="n">ar2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">p_of_position</span><span class="p">)</span>
    <span class="n">words_total_prob</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">ar1</span><span class="o">*</span><span class="n">ar2</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/img/posts/wordle/output_23_0.png" alt="png" /></p>

<p>The heatmap makes it easier to compare the probability of all letters in different positions. From what I see, the biggest change is in the letter â€˜Sâ€™ where the probability of the word ending in â€˜Sâ€™ with the Wordle solutions is 5.2%.</p>

<p>Itâ€™s also interesting to see how the probability of the vowels are higher in the second and fourth position of the word, especially with the letters â€˜Aâ€™ and â€˜Oâ€™ which is much more probable of being in the second position than any other position. Another letter to look at is the letter â€˜Yâ€™, which is much more likely to end with the letter than in any other position.</p>

<h2 id="word-probability-and-word-choice">Word Probability and Word Choice</h2>

<p>Knowing the probability of the letters in each of the posiitons is great and all, but what is the benefit of it? Can we figure out what word is the most probable? Can we determine the best starting word for the game with the probabilities?</p>

<p>Letâ€™s try to figure out the most probable word. By parsing through the list, we can apply the probability of each word by combining the probability of each letter.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p_word</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">word_list</span><span class="p">:</span>
    <span class="n">p</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
        <span class="n">i</span> <span class="o">=</span> <span class="n">word</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">words_position_prob</span><span class="p">.</span><span class="n">keys</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">char</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span>
                <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">*</span><span class="p">(</span><span class="n">words_position_prob</span><span class="p">[</span><span class="n">char</span><span class="p">][</span><span class="n">i</span><span class="p">])</span>
    <span class="n">p_word</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">word_list</span><span class="p">,</span><span class="n">p_word</span><span class="p">))</span>
<span class="n">word_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">([</span><span class="n">d</span><span class="p">],</span><span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s">'Probability'</span><span class="p">]).</span><span class="n">transpose</span><span class="p">()</span>
<span class="n">word_data</span> <span class="o">=</span> <span class="n">word_data</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s">'Probability'</span><span class="p">,</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">word_data</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Probability</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>sarsa</th>
      <td>2.993687e-08</td>
    </tr>
    <tr>
      <th>sarra</th>
      <td>2.231955e-08</td>
    </tr>
    <tr>
      <th>salsa</th>
      <td>2.189877e-08</td>
    </tr>
    <tr>
      <th>sassy</th>
      <td>1.891964e-08</td>
    </tr>
    <tr>
      <th>saree</th>
      <td>1.761153e-08</td>
    </tr>
    <tr>
      <th>taata</th>
      <td>1.737462e-08</td>
    </tr>
    <tr>
      <th>cacas</th>
      <td>1.713602e-08</td>
    </tr>
    <tr>
      <th>sooey</th>
      <td>1.699491e-08</td>
    </tr>
  </tbody>
</table>
</div>

<p>When finding the most probable word, we see that words that have the letter â€˜Sâ€™ and â€˜Aâ€™ repeating are in the first couple of words since we are basing this off the probability of the letters in their positions. Since â€˜Sâ€™ and â€˜Râ€™ are the most common consonants we see them repeating often, as well as the vowels that are very common like â€˜Aâ€™ and â€˜Eâ€™.</p>

<p>But with the game, we know that SARSA or SARRA isnâ€™t going to be a solution, nor is it a good word to guess to start the game. Words that are good to guess are probable but also contain a variety of letters since you are able to narrow down what letters are in the word or not.</p>

<p>Weâ€™re going to edit the program a little bit so that when the word repeats a letter, the â€˜probabilityâ€™ isnâ€™t affected. I put â€˜probabilityâ€™ in quotes because the probabilities are going to be summed for the letters in the positions and then add 0 if the letters are repeated. This will make all words with repeated letters head to the bottom of the list, but it wonâ€™t be an accurate representation of the probability.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p_word</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">word_list</span><span class="p">:</span>
    <span class="n">p</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
        <span class="n">i</span> <span class="o">=</span> <span class="n">word</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">words_position_prob</span><span class="p">.</span><span class="n">keys</span><span class="p">():</span>
                <span class="k">if</span> <span class="n">char</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">word</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">char</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">:</span>
                        <span class="n">p</span><span class="o">+=</span><span class="mi">0</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">p</span><span class="o">+=</span><span class="p">(</span><span class="n">words_position_prob</span><span class="p">[</span><span class="n">char</span><span class="p">][</span><span class="n">i</span><span class="p">])</span>
        
    <span class="n">p_word</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d2</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">word_list</span><span class="p">,</span><span class="n">p_word</span><span class="p">))</span>
<span class="n">word_data_2</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">([</span><span class="n">d2</span><span class="p">],</span><span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s">'"Probability"'</span><span class="p">]).</span><span class="n">transpose</span><span class="p">()</span>
<span class="n">word_data_2</span> <span class="o">=</span> <span class="n">word_data_2</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s">'"Probability"'</span><span class="p">,</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">word_data_2</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>"Probability"</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>cares</th>
      <td>0.140684</td>
    </tr>
    <tr>
      <th>bares</th>
      <td>0.139553</td>
    </tr>
    <tr>
      <th>tares</th>
      <td>0.138686</td>
    </tr>
    <tr>
      <th>pares</th>
      <td>0.137052</td>
    </tr>
    <tr>
      <th>canes</th>
      <td>0.136474</td>
    </tr>
    <tr>
      <th>mares</th>
      <td>0.135746</td>
    </tr>
    <tr>
      <th>banes</th>
      <td>0.135344</td>
    </tr>
    <tr>
      <th>dares</th>
      <td>0.135319</td>
    </tr>
  </tbody>
</table>
</div>

<p>This is a much better word list for the game. CARES has letter with the highest probability in the best position without repeating any letters. A lot of the top words end with the letter â€˜Sâ€™, has the vowels â€˜Aâ€™ and â€˜Eâ€™ in the second and fourth position, and has the most common consonants in the other positions. These word choices have a lot of common letters and will help narrow down the solution much faster than other guesses.</p>

<h2 id="so-what-is-the-best-word-to-start-with">So what is the best word to start with?</h2>

<p>Itâ€™s hard to say what the best word is to start with because it depends on more factors than just probability. CARES is the most probable that also doesnâ€™t repeat letters and is a very decent word to start with. Another good word to start with is ADIEU or AUDIO since these words contain most of the vowels and if you figure out what vowels are in the word, then you can narrow down the solution faster.</p>

<p>Luck is also a factor though. You might be a good guesser or code-breaker, but if you guess a random word and manage to nail an uncommon letter, that rapidly decreases the number of words that the solution can be.</p>

<p>Something that is interesting and I might try to figure out is what is the best information/color to recieve? Which narrows down the most? Yellow, green or black/white? Itâ€™s definitely dependant on the letter so thatâ€™s why I think it would be a good idea to follow this little experiment since what Iâ€™ve done is probably most of the hard work.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>
:ET